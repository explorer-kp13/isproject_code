{"ast":null,"code":"var _jsxFileName = \"/Users/karanpunjabi/Desktop/LAB MJ/folium 3 copy/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport { Icon, divIcon, point } from \"leaflet\";\nimport { coordinatesData } from \"./coordinates\"; // Import coordinatesData from coordinates.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customIcon = new Icon({\n  iconUrl: require(\"./icons/placeholder.png\"),\n  iconSize: [38, 38]\n});\nconst createClusterCustomIcon = function (cluster) {\n  return new divIcon({\n    html: \"<span class=\\\"cluster-icon\\\">\".concat(cluster.getChildCount(), \"</span>\"),\n    className: \"custom-marker-cluster\",\n    iconSize: point(33, 33, true)\n  });\n};\nconst initialTextAreaValue = '';\nexport default function App() {\n  _s();\n  const [textAreaValue, setTextAreaValue] = useState(initialTextAreaValue);\n  const [selectedType, setSelectedType] = useState(null); // State for selected type\n\n  const handleChange = event => {\n    setTextAreaValue(event.target.value);\n  };\n  const handleTypeClick = type => {\n    setSelectedType(type);\n  };\n\n  // Filter markers based on selected type\n  const filteredMarkers = selectedType ? coordinatesData.filter(coordinate => coordinate.type === selectedType) : coordinatesData;\n  const markers = filteredMarkers.map((coordinate, index) => ({\n    geocode: [coordinate.latitude, coordinate.longitude],\n    popUp: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Essay:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: textAreaValue,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleTypeClick(\"Supplier\"),\n      children: \"Supplier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleTypeClick(\"Market\"),\n      children: \"Market\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleTypeClick(\"Dry Port\"),\n      children: \"Dry Port\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleTypeClick(\"Origin/Dest\"),\n      children: \"Origin/Dest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [22.3149, 87.3105],\n      zoom: 15,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        chunkedLoading: true,\n        iconCreateFunction: createClusterCustomIcon,\n        children: markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: marker.geocode,\n          icon: customIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: marker.popUp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QQIECoQkkXhrcAk5r8Z7gjKNa7Y=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapContainer","TileLayer","Marker","Popup","MarkerClusterGroup","Icon","divIcon","point","coordinatesData","jsxDEV","_jsxDEV","customIcon","iconUrl","require","iconSize","createClusterCustomIcon","cluster","html","concat","getChildCount","className","initialTextAreaValue","App","_s","textAreaValue","setTextAreaValue","selectedType","setSelectedType","handleChange","event","target","value","handleTypeClick","type","filteredMarkers","filter","coordinate","markers","map","index","geocode","latitude","longitude","popUp","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","center","zoom","attribution","url","chunkedLoading","iconCreateFunction","marker","position","icon","_c","$RefreshReg$"],"sources":["/Users/karanpunjabi/Desktop/LAB MJ/folium 3 copy/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport { Icon, divIcon, point } from \"leaflet\";\nimport { coordinatesData } from \"./coordinates\"; // Import coordinatesData from coordinates.js\n\nconst customIcon = new Icon({\n  iconUrl: require(\"./icons/placeholder.png\"),\n  iconSize: [38, 38]\n});\n\nconst createClusterCustomIcon = function (cluster) {\n  return new divIcon({\n    html: `<span class=\"cluster-icon\">${cluster.getChildCount()}</span>`,\n    className: \"custom-marker-cluster\",\n    iconSize: point(33, 33, true)\n  });\n};\n\nconst initialTextAreaValue = '';\n\nexport default function App() {\n  const [textAreaValue, setTextAreaValue] = useState(initialTextAreaValue);\n  const [selectedType, setSelectedType] = useState(null); // State for selected type\n\n  const handleChange = (event) => {\n    setTextAreaValue(event.target.value);\n  };\n\n  const handleTypeClick = (type) => {\n    setSelectedType(type);\n  };\n\n  // Filter markers based on selected type\n  const filteredMarkers = selectedType\n    ? coordinatesData.filter((coordinate) => coordinate.type === selectedType)\n    : coordinatesData;\n\n  const markers = filteredMarkers.map((coordinate, index) => ({\n    geocode: [coordinate.latitude, coordinate.longitude],\n    popUp: (\n      <form>\n        <label>\n          Essay:\n          <textarea value={textAreaValue} onChange={handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }));\n\n  return (\n    <div>\n      {/* Buttons for each type */}\n      <button onClick={() => handleTypeClick(\"Supplier\")}>Supplier</button>\n      <button onClick={() => handleTypeClick(\"Market\")}>Market</button>\n      <button onClick={() => handleTypeClick(\"Dry Port\")}>Dry Port</button>\n      <button onClick={() => handleTypeClick(\"Origin/Dest\")}>Origin/Dest</button>\n      \n      {/* Map */}\n      <MapContainer center={[22.3149, 87.3105]} zoom={15}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <MarkerClusterGroup\n          chunkedLoading\n          iconCreateFunction={createClusterCustomIcon}\n        >\n          {markers.map((marker, index) => (\n            <Marker key={index} position={marker.geocode} icon={customIcon}>\n              <Popup>{marker.popUp}</Popup>\n            </Marker>\n          ))}\n        </MarkerClusterGroup>\n      </MapContainer>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc;AACrB,OAAO,0BAA0B;AACjC,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AACtE,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,SAASC,IAAI,EAAEC,OAAO,EAAEC,KAAK,QAAQ,SAAS;AAC9C,SAASC,eAAe,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAG,IAAIN,IAAI,CAAC;EAC1BO,OAAO,EAAEC,OAAO,CAAC,yBAAyB,CAAC;EAC3CC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,uBAAuB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACjD,OAAO,IAAIV,OAAO,CAAC;IACjBW,IAAI,kCAAAC,MAAA,CAAgCF,OAAO,CAACG,aAAa,CAAC,CAAC,YAAS;IACpEC,SAAS,EAAE,uBAAuB;IAClCN,QAAQ,EAAEP,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI;EAC9B,CAAC,CAAC;AACJ,CAAC;AAED,MAAMc,oBAAoB,GAAG,EAAE;AAE/B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAACsB,oBAAoB,CAAC;EACxE,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExD,MAAM6B,YAAY,GAAIC,KAAK,IAAK;IAC9BJ,gBAAgB,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAMC,eAAe,GAAIC,IAAI,IAAK;IAChCN,eAAe,CAACM,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGR,YAAY,GAChClB,eAAe,CAAC2B,MAAM,CAAEC,UAAU,IAAKA,UAAU,CAACH,IAAI,KAAKP,YAAY,CAAC,GACxElB,eAAe;EAEnB,MAAM6B,OAAO,GAAGH,eAAe,CAACI,GAAG,CAAC,CAACF,UAAU,EAAEG,KAAK,MAAM;IAC1DC,OAAO,EAAE,CAACJ,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACM,SAAS,CAAC;IACpDC,KAAK,eACHjC,OAAA;MAAAkC,QAAA,gBACElC,OAAA;QAAAkC,QAAA,GAAO,QAEL,eAAAlC,OAAA;UAAUqB,KAAK,EAAEP,aAAc;UAACqB,QAAQ,EAAEjB;QAAa;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACRvC,OAAA;QAAOuB,IAAI,EAAC,QAAQ;QAACF,KAAK,EAAC;MAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAEV,CAAC,CAAC,CAAC;EAEH,oBACEvC,OAAA;IAAAkC,QAAA,gBAEElC,OAAA;MAAQwC,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAAC,UAAU,CAAE;MAAAY,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrEvC,OAAA;MAAQwC,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAAC,QAAQ,CAAE;MAAAY,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjEvC,OAAA;MAAQwC,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAAC,UAAU,CAAE;MAAAY,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrEvC,OAAA;MAAQwC,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAAC,aAAa,CAAE;MAAAY,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG3EvC,OAAA,CAACV,YAAY;MAACmD,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,CAAE;MAACC,IAAI,EAAE,EAAG;MAAAR,QAAA,gBACjDlC,OAAA,CAACT,SAAS;QACRoD,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAoD;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eACFvC,OAAA,CAACN,kBAAkB;QACjBmD,cAAc;QACdC,kBAAkB,EAAEzC,uBAAwB;QAAA6B,QAAA,EAE3CP,OAAO,CAACC,GAAG,CAAC,CAACmB,MAAM,EAAElB,KAAK,kBACzB7B,OAAA,CAACR,MAAM;UAAawD,QAAQ,EAAED,MAAM,CAACjB,OAAQ;UAACmB,IAAI,EAAEhD,UAAW;UAAAiC,QAAA,eAC7DlC,OAAA,CAACP,KAAK;YAAAyC,QAAA,EAAEa,MAAM,CAACd;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC,GADlBV,KAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACgB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAAC1B,EAAA,CAzDuBD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}